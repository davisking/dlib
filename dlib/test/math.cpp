#include <dlib/math.h>
#include "tester.h"

namespace
{
    using namespace test;
    using namespace dlib;
    using namespace std;

    logger dlog("test.math");

    template<typename R>
    void test_cyl_bessel_i()
    {
        constexpr R tol = std::is_same<R,float>::value ? 1e-3 : 1e-9;

        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0,0.0) - 1.0) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0,9.5367431640625e-7) - 1.00000000000022737367544324498417583090700894607432256476338) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0,0.0009765625) - 1.00000023841859331241759166109699567801556273303717896447683) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0,0.1) - 1.00250156293410) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0,0.2) - 1.01002502779515) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0,0.5) - 1.06348337074132) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0,1.0) - 1.26606587775200833559824462521471753760767031135496220680814) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0,2.0) - 2.27958530233606726743720444081153335328584110278545905407084) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0,3.0) - 4.88079258586503) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0,4.0) - 11.3019219521363304963562701832171024974126165944353377060065) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0,7.0) - 168.593908510289698857326627187500840376522679234531714193194) < tol);

        // check case when nu=0.5
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0.5,0.0) - 0.000000000000000) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0.5,0.1) - 0.252733984600132) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0.5,0.2) - 0.359208417583362) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0.5,0.5) - 0.587993086790417) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0.5,1.0) - 0.937674888245489) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0.5,2.0) - 2.046236863089057) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(0.5,3.0) - 4.614822903407577) < tol);

        // check case when nu=1
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(1,0.0) - 0.000000000000000) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(1,9.5367431640625e-7) - 4.76837158203179210108624277276025646653133998635956784292029E-7) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(1,0.0009765625) - 0.000488281308207663226432087816784315537514225208473395063575150) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(1,1.0) - 0.565159103992485027207696027609863307328899621621092009480294) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(1,2.0) - 1.59063685463732906338225442499966624795447815949553664713229) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(1,4.0) - 9.75946515370444990947519256731268090005597033325296730692753) < tol);

        // check case when nu=1.3
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(1.3,0.0) - 0.000000000000000) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(1.3,0.1) - 0.017465030873157) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(1.3,0.2) - 0.043144293848607) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(1.3,0.5) - 0.145248507279042) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(1.3,1.0) - 0.387392350983796) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(1.3,2.0) - 1.290819215135879) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(1.3,3.0) - 3.450680420553085) < tol);

        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(2.0,0.0) - 0.000000000000000) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(2.0,9.5367431640625e-7) - 1.13686837721624646204093977095674566928522671779753217215467e-13) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(5.0,1.0) - 0.000271463155956971875181073905153777342383564426758143634974124) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_i<R,R>(5.0,10.0) - 777.188286403259959907293484802339632852674154572666041953297) < tol);
    }

    template<typename R>
    void test_cyl_bessel_j()
    {
        constexpr R tol = std::is_same<R,float>::value ? 1e-3 : 1e-7;
        
        // check case when nu=0
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.0f,0.0f) -  1.000000000000000) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.0f,1e-5) -  0.999999999975000000000156249999999565972) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.0f,0.1f) -  0.99750156206604012610) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.0f,0.2f) -  0.990024972239576) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.0f,0.5f) -  0.938469807240813) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.0f,1.0f) -  0.7651976865579665514497175261026632209093) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.0f,2.0f) -  0.2238907791412356680518274546499486258252) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.0f,3.0f) - -0.260051954901934) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.0f,4.0f) - -0.3971498098638473722865907684516980419756) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.0f,6.0f) -  0.150645257250997) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.0f,8.0f) -  0.1716508071375539060908694078519720010684) < tol);

        // check case when nu=0.5
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.5f,0.0f) -  0.000000000000000) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.5f,0.1f) -  0.251892940326001) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.5f,0.2f) -  0.354450744211402) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.5f,0.5f) -  0.540973789934529) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.5f,1.0f) -  0.671396707141804) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.5f,2.0f) -  0.513016136561828) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.5f,3.0f) -  0.065008182877376) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.5f,4.0f) - -0.301920513291637) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.5f,6.0f) - -0.091015409523068) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (0.5f,8.0f) -  0.279092808570990) < tol);

        // check case when nu=1.7
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (1.7f,0.0f) -  0.000000000000000) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (1.7f,0.1f) -  0.003971976455203) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (1.7f,0.2f) -  0.012869169735073) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (1.7f,0.5f) -  0.059920175825578) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (1.7f,1.0f) -  0.181417665056645) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (1.7f,2.0f) -  0.437811462130677) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (1.7f,3.0f) -  0.494432522734784) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (1.7f,4.0f) -  0.268439400467270) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (1.7f,6.0f) - -0.308175744215833) < tol);
        DLIB_TEST(std::abs(dlib::cyl_bessel_j<R,R> (1.7f,8.0f) - -0.001102600927987) < tol);
    }

    /*! Data generated using numpy.kaiser(100,10) !*/
    const static double KAISER_DATA_N_100_BETA_10[100] = {
            3.55149375e-04, 8.09535658e-04, 1.49276026e-03, 2.46754423e-03,
            3.80523361e-03, 5.58573035e-03, 7.89720947e-03, 1.08356055e-02,
            1.45038557e-02, 1.90108920e-02, 2.44703805e-02, 3.09992135e-02,
            3.87157636e-02, 4.77379195e-02, 5.81809273e-02, 7.01550686e-02,
            8.37632128e-02, 9.90982873e-02, 1.16240713e-01, 1.35255857e-01,
            1.56191560e-01, 1.79075790e-01, 2.03914484e-01, 2.30689637e-01,
            2.59357685e-01, 2.89848231e-01, 3.22063181e-01, 3.55876291e-01,
            3.91133201e-01, 4.27651939e-01, 4.65223934e-01, 5.03615540e-01,
            5.42570042e-01, 5.81810162e-01, 6.21040999e-01, 6.59953392e-01,
            6.98227647e-01, 7.35537562e-01, 7.71554707e-01, 8.05952855e-01,
            8.38412520e-01, 8.68625492e-01, 8.96299310e-01, 9.21161565e-01,
            9.42963979e-01, 9.61486159e-01, 9.76538966e-01, 9.87967431e-01,
            9.95653159e-01, 9.99516175e-01, 9.99516175e-01, 9.95653159e-01,
            9.87967431e-01, 9.76538966e-01, 9.61486159e-01, 9.42963979e-01,
            9.21161565e-01, 8.96299310e-01, 8.68625492e-01, 8.38412520e-01,
            8.05952855e-01, 7.71554707e-01, 7.35537562e-01, 6.98227647e-01,
            6.59953392e-01, 6.21040999e-01, 5.81810162e-01, 5.42570042e-01,
            5.03615540e-01, 4.65223934e-01, 4.27651939e-01, 3.91133201e-01,
            3.55876291e-01, 3.22063181e-01, 2.89848231e-01, 2.59357685e-01,
            2.30689637e-01, 2.03914484e-01, 1.79075790e-01, 1.56191560e-01,
            1.35255857e-01, 1.16240713e-01, 9.90982873e-02, 8.37632128e-02,
            7.01550686e-02, 5.81809273e-02, 4.77379195e-02, 3.87157636e-02,
            3.09992135e-02, 2.44703805e-02, 1.90108920e-02, 1.45038557e-02,
            1.08356055e-02, 7.89720947e-03, 5.58573035e-03, 3.80523361e-03,
            2.46754423e-03, 1.49276026e-03, 8.09535658e-04, 3.55149375e-04
    };

    /*! Data generated using scipy.signal.windows.kaiser(100, beta=(0.1102*(60.0 - 8.7)), sym=True) !*/
    const static double KAISER_DATA_N_100_ATT_60_SYMMETRIC[100] = {
            0.020388  , 0.02744256, 0.03547437, 0.04452765, 0.05464219,
            0.06585282, 0.07818886, 0.09167367, 0.1063242 , 0.12215057,
            0.13915573, 0.15733509, 0.1766763 , 0.19715903, 0.21875482,
            0.24142695, 0.26513048, 0.28981222, 0.3154109 , 0.34185729,
            0.36907445, 0.39697806, 0.42547675, 0.45447258, 0.48386148,
            0.51353385, 0.54337511, 0.57326642, 0.60308532, 0.63270649,
            0.66200256, 0.69084482, 0.71910415, 0.74665178, 0.77336018,
            0.7991039 , 0.82376041, 0.84721094, 0.86934129, 0.89004263,
            0.90921226, 0.92675431, 0.94258044, 0.95661046, 0.96877289,
            0.97900548, 0.98725567, 0.99348091, 0.99764907, 0.99973856,
            0.99973856, 0.99764907, 0.99348091, 0.98725567, 0.97900548,
            0.96877289, 0.95661046, 0.94258044, 0.92675431, 0.90921226,
            0.89004263, 0.86934129, 0.84721094, 0.82376041, 0.7991039 ,
            0.77336018, 0.74665178, 0.71910415, 0.69084482, 0.66200256,
            0.63270649, 0.60308532, 0.57326642, 0.54337511, 0.51353385,
            0.48386148, 0.45447258, 0.42547675, 0.39697806, 0.36907445,
            0.34185729, 0.3154109 , 0.28981222, 0.26513048, 0.24142695,
            0.21875482, 0.19715903, 0.1766763 , 0.15733509, 0.13915573,
            0.12215057, 0.1063242 , 0.09167367, 0.07818886, 0.06585282,
            0.05464219, 0.04452765, 0.03547437, 0.02744256, 0.020388
    };

    /*! Data generated using scipy.signal.windows.kaiser(100, beta=(0.1102*(60.0 - 8.7)), sym=False) !*/
    const static double KAISER_DATA_N_100_ATT_60_PERIODIC[100] = {
            0.020388  , 0.02736726, 0.03530386, 0.0442408 , 0.05421678,
            0.06526578, 0.0774165 , 0.09069194, 0.10510897, 0.12067792,
            0.13740224, 0.15527819, 0.17429461, 0.19443265, 0.21566568,
            0.23795919, 0.2612707 , 0.28554985, 0.31073847, 0.33677071,
            0.3635733 , 0.39106578, 0.41916087, 0.44776486, 0.47677808,
            0.50609537, 0.5356067 , 0.56519774, 0.59475052, 0.62414415,
            0.65325551, 0.68196003, 0.71013245, 0.73764762, 0.76438133,
            0.79021107, 0.81501689, 0.83868214, 0.86109433, 0.88214579,
            0.90173451, 0.91976477, 0.9361478 , 0.95080246, 0.96365572,
            0.97464323, 0.98370975, 0.99080954, 0.99590669, 0.99897537,
            1.        , 0.99897537, 0.99590669, 0.99080954, 0.98370975,
            0.97464323, 0.96365572, 0.95080246, 0.9361478 , 0.91976477,
            0.90173451, 0.88214579, 0.86109433, 0.83868214, 0.81501689,
            0.79021107, 0.76438133, 0.73764762, 0.71013245, 0.68196003,
            0.65325551, 0.62414415, 0.59475052, 0.56519774, 0.5356067 ,
            0.50609537, 0.47677808, 0.44776486, 0.41916087, 0.39106578,
            0.3635733 , 0.33677071, 0.31073847, 0.28554985, 0.2612707 ,
            0.23795919, 0.21566568, 0.19443265, 0.17429461, 0.15527819,
            0.13740224, 0.12067792, 0.10510897, 0.09069194, 0.0774165 ,
            0.06526578, 0.05421678, 0.0442408 , 0.03530386, 0.02736726
    };

    template<typename R>
    void test_kaiser()
    {
        constexpr R tol = std::is_same<R,float>::value ? 1e-3 : 1e-7;

        for (size_t i = 0 ; i < 100 ; ++i)
        {
            DLIB_TEST(std::abs(dlib::kaiser<R>(index_t{i}, window_length{100}, beta_t{10.0}, symmetric_t{}) - KAISER_DATA_N_100_BETA_10[i]) < tol);
            DLIB_TEST(std::abs(dlib::kaiser<R>(index_t{i}, window_length{100}, attenuation_t{60.0}, symmetric_t{}) - KAISER_DATA_N_100_ATT_60_SYMMETRIC[i]) < tol);
            DLIB_TEST(std::abs(dlib::kaiser<R>(index_t{i}, window_length{100}, attenuation_t{60.0}, periodic_t{}) - KAISER_DATA_N_100_ATT_60_PERIODIC[i]) < tol);
        }
    }

    /*! Data generated using scipy.signal.windows.blackman(100, sym=True) !*/
    const static double BLACKMAN_SYMMETRIC[100] = {
            -1.38777878e-17,  3.63046791e-04,  1.45848970e-03,  3.30508601e-03,
            5.93359947e-03,  9.38606173e-03,  1.37147565e-02,  1.89809442e-02,
            2.52533489e-02,  3.26064346e-02,  4.11185013e-02,  5.08696327e-02,
            6.19395342e-02,  7.44052977e-02,  8.83391330e-02,  1.03806108e-01,
            1.20861937e-01,  1.39550858e-01,  1.59903635e-01,  1.81935733e-01,
            2.05645686e-01,  2.31013696e-01,  2.58000502e-01,  2.86546517e-01,
            3.16571288e-01,  3.47973259e-01,  3.80629867e-01,  4.14397981e-01,
            4.49114657e-01,  4.84598234e-01,  5.20649734e-01,  5.57054572e-01,
            5.93584531e-01,  6.30000000e-01,  6.66052422e-01,  7.01486938e-01,
            7.36045180e-01,  7.69468167e-01,  8.01499281e-01,  8.31887262e-01,
            8.60389188e-01,  8.86773393e-01,  9.10822277e-01,  9.32334982e-01,
            9.51129866e-01,  9.67046769e-01,  9.79949017e-01,  9.89725134e-01,
            9.96290257e-01,  9.99587205e-01,  9.99587205e-01,  9.96290257e-01,
            9.89725134e-01,  9.79949017e-01,  9.67046769e-01,  9.51129866e-01,
            9.32334982e-01,  9.10822277e-01,  8.86773393e-01,  8.60389188e-01,
            8.31887262e-01,  8.01499281e-01,  7.69468167e-01,  7.36045180e-01,
            7.01486938e-01,  6.66052422e-01,  6.30000000e-01,  5.93584531e-01,
            5.57054572e-01,  5.20649734e-01,  4.84598234e-01,  4.49114657e-01,
            4.14397981e-01,  3.80629867e-01,  3.47973259e-01,  3.16571288e-01,
            2.86546517e-01,  2.58000502e-01,  2.31013696e-01,  2.05645686e-01,
            1.81935733e-01,  1.59903635e-01,  1.39550858e-01,  1.20861937e-01,
            1.03806108e-01,  8.83391330e-02,  7.44052977e-02,  6.19395342e-02,
            5.08696327e-02,  4.11185013e-02,  3.26064346e-02,  2.52533489e-02,
            1.89809442e-02,  1.37147565e-02,  9.38606173e-03,  5.93359947e-03,
            3.30508601e-03,  1.45848970e-03,  3.63046791e-04, -1.38777878e-17
    };

    /*! Data generated using scipy.signal.windows.blackman(100, sym=False) !*/
    const static double BLACKMAN_PERIODIC[100] = {
            -1.38777878e-17,  3.55811891e-04,  1.42930223e-03,  3.23849351e-03,
            5.81295384e-03,  9.19310140e-03,  1.34292472e-02,  1.85803929e-02,
            2.47128036e-02,  3.18983806e-02,  4.02128624e-02,  4.97338838e-02,
            6.05389279e-02,  7.27032055e-02,  8.62975000e-02,  1.01386014e-01,
            1.18024259e-01,  1.36257019e-01,  1.56116435e-01,  1.77620233e-01,
            2.00770143e-01,  2.25550522e-01,  2.51927224e-01,  2.79846730e-01,
            3.09235564e-01,  3.40000000e-01,  3.72026084e-01,  4.05179964e-01,
            4.39308538e-01,  4.74240409e-01,  5.09787138e-01,  5.45744786e-01,
            5.81895727e-01,  6.18010693e-01,  6.53851054e-01,  6.89171267e-01,
            7.23721490e-01,  7.57250311e-01,  7.89507555e-01,  8.20247127e-01,
            8.49229857e-01,  8.76226306e-01,  9.01019484e-01,  9.23407445e-01,
            9.43205733e-01,  9.60249618e-01,  9.74396115e-01,  9.85525744e-01,
            9.93544004e-01,  9.98382540e-01,  1.00000000e+00,  9.98382540e-01,
            9.93544004e-01,  9.85525744e-01,  9.74396115e-01,  9.60249618e-01,
            9.43205733e-01,  9.23407445e-01,  9.01019484e-01,  8.76226306e-01,
            8.49229857e-01,  8.20247127e-01,  7.89507555e-01,  7.57250311e-01,
            7.23721490e-01,  6.89171267e-01,  6.53851054e-01,  6.18010693e-01,
            5.81895727e-01,  5.45744786e-01,  5.09787138e-01,  4.74240409e-01,
            4.39308538e-01,  4.05179964e-01,  3.72026084e-01,  3.40000000e-01,
            3.09235564e-01,  2.79846730e-01,  2.51927224e-01,  2.25550522e-01,
            2.00770143e-01,  1.77620233e-01,  1.56116435e-01,  1.36257019e-01,
            1.18024259e-01,  1.01386014e-01,  8.62975000e-02,  7.27032055e-02,
            6.05389279e-02,  4.97338838e-02,  4.02128624e-02,  3.18983806e-02,
            2.47128036e-02,  1.85803929e-02,  1.34292472e-02,  9.19310140e-03,
            5.81295384e-03,  3.23849351e-03,  1.42930223e-03,  3.55811891e-04
    };

    template<typename R>
    void test_blackman()
    {
        constexpr R tol = std::is_same<R,float>::value ? 1e-3 : 1e-7;

        for (size_t i = 0 ; i < 100 ; ++i)
        {
            DLIB_TEST(std::abs(dlib::blackman<R>(index_t{i}, window_length{100}, symmetric_t{}) - BLACKMAN_SYMMETRIC[i]) < tol);
            DLIB_TEST(std::abs(dlib::blackman<R>(index_t{i}, window_length{100}, periodic_t{}) - BLACKMAN_PERIODIC[i]) < tol);
        }
    }

    /*! Data generated using scipy.signal.windows.nuttall(100, sym=True) !*/
    const static double NUTTALL_SYMMETRIC[100] = {
            3.62800000e-04, 4.41002565e-04, 6.82377171e-04, 1.10720719e-03,
            1.74923583e-03, 2.65555676e-03, 3.88643049e-03, 5.51499796e-03,
            7.62685769e-03, 1.03194694e-02, 1.37013463e-02, 1.78909987e-02,
            2.30155970e-02, 2.92093274e-02, 3.66114211e-02, 4.53638515e-02,
            5.56087028e-02, 6.74852288e-02, 8.11266343e-02, 9.66566260e-02,
            1.14185793e-01, 1.33807894e-01, 1.55596126e-01, 1.79599488e-01,
            2.05839317e-01, 2.34306121e-01, 2.64956803e-01, 2.97712384e-01,
            3.32456313e-01, 3.69033462e-01, 4.07249866e-01, 4.46873268e-01,
            4.87634513e-01, 5.29229800e-01, 5.71323780e-01, 6.13553487e-01,
            6.55533038e-01, 6.96859023e-01, 7.37116499e-01, 7.75885468e-01,
            8.12747696e-01, 8.47293750e-01, 8.79130073e-01, 9.07885954e-01,
            9.33220225e-01, 9.54827525e-01, 9.72443988e-01, 9.85852214e-01,
            9.94885396e-01, 9.99430517e-01, 9.99430517e-01, 9.94885396e-01,
            9.85852214e-01, 9.72443988e-01, 9.54827525e-01, 9.33220225e-01,
            9.07885954e-01, 8.79130073e-01, 8.47293750e-01, 8.12747696e-01,
            7.75885468e-01, 7.37116499e-01, 6.96859023e-01, 6.55533038e-01,
            6.13553487e-01, 5.71323780e-01, 5.29229800e-01, 4.87634513e-01,
            4.46873268e-01, 4.07249866e-01, 3.69033462e-01, 3.32456313e-01,
            2.97712384e-01, 2.64956803e-01, 2.34306121e-01, 2.05839317e-01,
            1.79599488e-01, 1.55596126e-01, 1.33807894e-01, 1.14185793e-01,
            9.66566260e-02, 8.11266343e-02, 6.74852288e-02, 5.56087028e-02,
            4.53638515e-02, 3.66114211e-02, 2.92093274e-02, 2.30155970e-02,
            1.78909987e-02, 1.37013463e-02, 1.03194694e-02, 7.62685769e-03,
            5.51499796e-03, 3.88643049e-03, 2.65555676e-03, 1.74923583e-03,
            1.10720719e-03, 6.82377171e-04, 4.41002565e-04, 3.62800000e-04
    };

    /*! Data generated using scipy.signal.windows.nuttall(100, sym=False) !*/
    const static double NUTTALL_PERIODIC[100] = {
            3.62800000e-04, 4.39435333e-04, 6.75841652e-04, 1.09150360e-03,
            1.71883698e-03, 2.60308627e-03, 3.80215308e-03, 5.38632887e-03,
            7.43790111e-03, 1.00505980e-02, 1.33288369e-02, 1.73867411e-02,
            2.23468952e-02, 2.83388130e-02, 3.54970994e-02, 4.39593003e-02,
            5.38634414e-02, 6.53452720e-02, 7.85352426e-02, 9.35552568e-02,
            1.10515253e-01, 1.29509683e-01, 1.50613960e-01, 1.73880977e-01,
            1.99337762e-01, 2.26982400e-01, 2.56781294e-01, 2.88666872e-01,
            3.22535833e-01, 3.58248009e-01, 3.95625913e-01, 4.34455043e-01,
            4.74484961e-01, 5.15431183e-01, 5.56977882e-01, 5.98781366e-01,
            6.40474313e-01, 6.81670680e-01, 7.21971212e-01, 7.60969447e-01,
            7.98258097e-01, 8.33435679e-01, 8.66113243e-01, 8.95921068e-01,
            9.22515147e-01, 9.45583348e-01, 9.64851072e-01, 9.80086303e-01,
            9.91103909e-01, 9.97769109e-01, 1.00000000e+00, 9.97769109e-01,
            9.91103909e-01, 9.80086303e-01, 9.64851072e-01, 9.45583348e-01,
            9.22515147e-01, 8.95921068e-01, 8.66113243e-01, 8.33435679e-01,
            7.98258097e-01, 7.60969447e-01, 7.21971212e-01, 6.81670680e-01,
            6.40474313e-01, 5.98781366e-01, 5.56977882e-01, 5.15431183e-01,
            4.74484961e-01, 4.34455043e-01, 3.95625913e-01, 3.58248009e-01,
            3.22535833e-01, 2.88666872e-01, 2.56781294e-01, 2.26982400e-01,
            1.99337762e-01, 1.73880977e-01, 1.50613960e-01, 1.29509683e-01,
            1.10515253e-01, 9.35552568e-02, 7.85352426e-02, 6.53452720e-02,
            5.38634414e-02, 4.39593003e-02, 3.54970994e-02, 2.83388130e-02,
            2.23468952e-02, 1.73867411e-02, 1.33288369e-02, 1.00505980e-02,
            7.43790111e-03, 5.38632887e-03, 3.80215308e-03, 2.60308627e-03,
            1.71883698e-03, 1.09150360e-03, 6.75841652e-04, 4.39435333e-04
    };

    template<typename R>
    void test_blackman_nutall()
    {
        constexpr R tol = std::is_same<R,float>::value ? 1e-3 : 1e-7;

        for (size_t i = 0 ; i < 100 ; ++i)
        {
            DLIB_TEST(std::abs(dlib::blackman_nutall<R>(index_t{i}, window_length{100}, symmetric_t{}) - NUTTALL_SYMMETRIC[i]) < tol);
            DLIB_TEST(std::abs(dlib::blackman_nutall<R>(index_t{i}, window_length{100}, periodic_t{}) - NUTTALL_PERIODIC[i]) < tol);
        }
    }

    /*! Data generated using scipy.signal.windows.blackmanharris(100, sym=True) !*/
    const static double BLACKHARRIS_SYMMETRIC[100] = {
            6.00000000e-05, 1.17534518e-04, 2.96839519e-04, 6.18016727e-04,
            1.11455502e-03, 1.83329120e-03, 2.83431954e-03, 4.19081706e-03,
            5.98874496e-03, 8.32638280e-03, 1.13136504e-02, 1.50711734e-02,
            1.97290530e-02, 2.54253057e-02, 3.23039502e-02, 4.05127277e-02,
            5.02004574e-02, 6.15140423e-02, 7.45951567e-02, 8.95766634e-02,
            1.06578823e-01, 1.25705371e-01, 1.47039558e-01, 1.70640249e-01,
            1.96538190e-01, 2.24732563e-01, 2.55187931e-01, 2.87831698e-01,
            3.22552180e-01, 3.59197388e-01, 3.97574593e-01, 4.37450752e-01,
            4.78553822e-01, 5.20575000e-01, 5.63171861e-01, 6.05972396e-01,
            6.48579866e-01, 6.90578416e-01, 7.31539334e-01, 7.71027841e-01,
            8.08610259e-01, 8.43861422e-01, 8.76372139e-01, 9.05756562e-01,
            9.31659269e-01, 9.53761897e-01, 9.71789172e-01, 9.85514181e-01,
            9.94762749e-01, 9.99416836e-01, 9.99416836e-01, 9.94762749e-01,
            9.85514181e-01, 9.71789172e-01, 9.53761897e-01, 9.31659269e-01,
            9.05756562e-01, 8.76372139e-01, 8.43861422e-01, 8.08610259e-01,
            7.71027841e-01, 7.31539334e-01, 6.90578416e-01, 6.48579866e-01,
            6.05972396e-01, 5.63171861e-01, 5.20575000e-01, 4.78553822e-01,
            4.37450752e-01, 3.97574593e-01, 3.59197388e-01, 3.22552180e-01,
            2.87831698e-01, 2.55187931e-01, 2.24732563e-01, 1.96538190e-01,
            1.70640249e-01, 1.47039558e-01, 1.25705371e-01, 1.06578823e-01,
            8.95766634e-02, 7.45951567e-02, 6.15140423e-02, 5.02004574e-02,
            4.05127277e-02, 3.23039502e-02, 2.54253057e-02, 1.97290530e-02,
            1.50711734e-02, 1.13136504e-02, 8.32638280e-03, 5.98874496e-03,
            4.19081706e-03, 2.83431954e-03, 1.83329120e-03, 1.11455502e-03,
            6.18016727e-04, 2.96839519e-04, 1.17534518e-04, 6.00000000e-05
    };

    /*! Data generated using scipy.signal.windows.blackmanharris(100, sym=False) !*/
    const static double BLACKHARRIS_PERIODIC[100] = {
            6.00000000e-05, 1.16378689e-04, 2.91952144e-04, 6.06030098e-04,
            1.09078244e-03, 1.79120288e-03, 2.76502526e-03, 4.08256194e-03,
            5.82642753e-03, 8.09110774e-03, 1.09823313e-02, 1.46162037e-02,
            1.91180657e-02, 2.46210437e-02, 3.12642699e-02, 3.91907583e-02,
            4.85449357e-02, 5.94698411e-02, 7.21040198e-02, 8.65781545e-02,
            1.03011489e-01, 1.21508117e-01, 1.42153213e-01, 1.65009301e-01,
            1.90112666e-01, 2.17470000e-01, 2.47055404e-01, 2.78807841e-01,
            3.12629143e-01, 3.48382667e-01, 3.85892669e-01, 4.24944470e-01,
            4.65285458e-01, 5.06626940e-01, 5.48646868e-01, 5.90993400e-01,
            6.33289266e-01, 6.75136867e-01, 7.16124023e-01, 7.55830261e-01,
            7.93833511e-01, 8.29717089e-01, 8.63076792e-01, 8.93527961e-01,
            9.20712350e-01, 9.44304639e-01, 9.64018433e-01, 9.79611614e-01,
            9.90890906e-01, 9.97715551e-01, 1.00000000e+00, 9.97715551e-01,
            9.90890906e-01, 9.79611614e-01, 9.64018433e-01, 9.44304639e-01,
            9.20712350e-01, 8.93527961e-01, 8.63076792e-01, 8.29717089e-01,
            7.93833511e-01, 7.55830261e-01, 7.16124023e-01, 6.75136867e-01,
            6.33289266e-01, 5.90993400e-01, 5.48646868e-01, 5.06626940e-01,
            4.65285458e-01, 4.24944470e-01, 3.85892669e-01, 3.48382667e-01,
            3.12629143e-01, 2.78807841e-01, 2.47055404e-01, 2.17470000e-01,
            1.90112666e-01, 1.65009301e-01, 1.42153213e-01, 1.21508117e-01,
            1.03011489e-01, 8.65781545e-02, 7.21040198e-02, 5.94698411e-02,
            4.85449357e-02, 3.91907583e-02, 3.12642699e-02, 2.46210437e-02,
            1.91180657e-02, 1.46162037e-02, 1.09823313e-02, 8.09110774e-03,
            5.82642753e-03, 4.08256194e-03, 2.76502526e-03, 1.79120288e-03,
            1.09078244e-03, 6.06030098e-04, 2.91952144e-04, 1.16378689e-04
    };

    template<typename R>
    void test_blackman_harris()
    {
        constexpr R tol = std::is_same<R,float>::value ? 1e-3 : 1e-7;

        for (size_t i = 0 ; i < 100 ; ++i)
        {
            DLIB_TEST(std::abs(dlib::blackman_harris<R>(index_t{i}, window_length{100}, symmetric_t{}) - BLACKHARRIS_SYMMETRIC[i]) < tol);
            DLIB_TEST(std::abs(dlib::blackman_harris<R>(index_t{i}, window_length{100}, periodic_t{}) - BLACKHARRIS_PERIODIC[i]) < tol);
        }
    }

    class math_tester : public tester
    {
    public:
        math_tester (
        ) :
            tester ("test_math", "Runs tests on the math functions")
        {}

        void perform_test (
        )
        {
            test_cyl_bessel_i<float>();
            test_cyl_bessel_i<double>();
            test_cyl_bessel_j<float>();
            test_cyl_bessel_j<double>();
            test_kaiser<float>();
            test_kaiser<double>();
            test_blackman<float>();
            test_blackman<double>();
            test_blackman_nutall<float>();
            test_blackman_nutall<double>();
            test_blackman_harris<float>();
            test_blackman_harris<double>();
        }
    } a;
}